[{"D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\index.js":"1","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\reportWebVitals.js":"2","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\App.js":"3","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\modal.jsx":"4","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\todoList.jsx":"5","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\font\\index.jsx":"6","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\task.jsx":"7"},{"size":607,"mtime":1608280226763,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":5792,"mtime":1608285913641,"results":"11","hashOfConfig":"9"},{"size":2943,"mtime":1608285023301,"results":"12","hashOfConfig":"9"},{"size":4033,"mtime":1608280099518,"results":"13","hashOfConfig":"9"},{"size":276,"mtime":1608125384759,"results":"14","hashOfConfig":"9"},{"size":6195,"mtime":1608282193520,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"6p9hcu",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\index.js",["36"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["37","38"],"D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\reportWebVitals.js",[],"D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\App.js",["39","40"],"import React, { Component } from 'react'\nimport './App.css';\nimport List from './component/todoList';\nimport Modal from './component/modal';\nimport './component/font';\nimport toastr from 'toastr';\nimport 'toastr/build/toastr.min.css';\nimport {v1 as uuidv1} from 'uuid';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\n\nclass App extends Component {\n  state = { \n    lists : [\n      {\n        id: 'td', title: \"TODO\", tasks: []\n      },\n      {\n        id: 'ip', title: \"IN\", tasks: []\n      },\n      {\n        id: 'de', title: \"DONE\", tasks: []\n      }\n      \n    ],\n    taskContent: '',\n    isShow :'',\n    selected: '',\n    editId: null\n   }\n  componentDidMount() {\n    const lists = localStorage.getItem('lists');\n    if(lists){\n      this.setState({\n        lists: JSON.parse(lists)\n      })\n    }\n  }\n\n  handleToggelModal = (listId )=> {\n      const isShow = this.state.isShow === '' ? 'show' : '';\n      this.setState({\n        isShow : isShow,\n        selected : listId\n      });\n      \n  }\n  handleSelected = selected =>{\n    this.setState({ selected: selected })\n  }\n\n  handleTaskContent = (e) =>{\n    const taskContent = this.state.taskContent;\n    this.setState({ taskContent : e.target.value});\n   \n  }\n\n  handleAddTask = (e) =>{\n    e.preventDefault();\n    const { taskContent, selected } = this.state ;\n   \n    if(taskContent.trim() ===''){\n       toastr.warning('Please enter your task', 'Notice', { timeOut: 2000 });\n    }else{\n      const newTask = \n      {\n        id: uuidv1(),\n        content: taskContent,\n        time: new Date().toLocaleString()\n      }\n      \n    const indexList = this.state.lists.findIndex(list => list.id ===selected);\n    let lists = [...this.state.lists]; \n    let tasks = lists[indexList].tasks;\n    tasks.push(newTask);\n    this.setState({\n      lists: lists,\n      taskContent: '',\n      isShow: '',\n      selected: '',\n    }, ()=>{\n      localStorage.setItem('lists',JSON.stringify(lists));\n    });\n    \n    } \n  }\n\n  handleDeleteTask=(taskId, indexList)=>{\n    const getlists = JSON.parse(localStorage.getItem('lists'));\n    const index = getlists.findIndex(list => list.id === indexList );\n    let lists = [...getlists];\n    let newTasks = lists[index].tasks.filter(task=> task.id !== taskId);\n    lists[index].tasks =newTasks;\n    \n    localStorage.setItem('lists',JSON.stringify(lists));\n    this.setState({\n      lists: lists,\n      taskContent: '',\n      isShow :'',\n      selected: ''\n    })\n    \n  }\n  \n  handleChooseEdit = (taskId)=>{\n      this.setState({\n        editId: taskId,\n        \n      })\n     \n  }\n  handleEdit = (taskId, indexTask, listId)=>{\n    const { taskContent } = this.state;\n    if(taskContent.trim() ===''){\n      toastr.warning('Please enter your task', 'Notice', { timeOut: 2000 });\n   }else{\n      \n      const indexList = this.state.lists.findIndex(list => list.id ===listId);\n      let lists = [...this.state.lists];\n      let tasks = lists[indexList].tasks;\n      tasks[indexTask].content = taskContent;\n      \n      localStorage.setItem('lists', JSON.stringify(lists));\n      this.setState({\n        lists: lists,\n        editId: null\n      })\n\n   }\n   \n  }\n  handleCancelEdit = ()=>{\n    this.setState({\n      editId: null,\n      taskContent: ''\n    })\n  }\n\n  handleDragSave =(result)=>{\n    const { source, destination, reason } = result;\n      if(reason === 'DROP' && destination){\n        const { lists } = this.state;\n        const sourceListIndex = lists.findIndex(list=> list.id === source.droppableId);\n        const taskChooses = lists[sourceListIndex];\n        const taskIndex = taskChooses.tasks.findIndex((task, indexTask)=> indexTask === source.index);\n        const task = taskChooses.tasks[taskIndex];\n        taskChooses.tasks.splice([taskIndex],1);\n        \n        const destinationListIndex = lists.findIndex(list => list.id === destination.droppableId);\n      \n        const taskTo = lists[destinationListIndex];\n        taskTo.tasks.splice(destination.index,0,task);\n        localStorage.setItem('lists',JSON.stringify(lists));\n        this.setState({\n          lists: lists\n        })\n      }\n  }\n  render() { \n    const { lists } = this.state;\n    console.log(lists);\n    return ( \n          <div className=\"container\">\n            <h1 className=\"container__title text-primary font-weight-bold\" style={{textAlign: \"center\"}}>TODO LIST</h1>\n            <DragDropContext onDragEnd={this.handleDragSave}>\n            <div className=\"container__content row\"> \n                  {       \n                   \n                     lists.map(list => (\n                      <List\n                      key={list.id}\n                      handleToggelModal = {this.handleToggelModal} \n                      list= {list}\n                      onShow ={this.state.isShow} \n                      isEdit ={this.state.editId}\n                      onDelete={this.handleDeleteTask}\n                      handleChooseEdit= {this.handleChooseEdit}\n                      handleCancelEdit= {this.handleCancelEdit}\n                      handleTaskContent= {this.handleTaskContent}\n                      handleEdit= {this.handleEdit}\n                      >\n  \n                      </List>\n                    ))\n                    \n                }\n            </div>\n            </DragDropContext>\n            {<Modal \n                handleToggelModal = {this.handleToggelModal}  \n                onShow ={this.state.isShow} \n                onSelect={this.handleSelected} \n                lists={this.state.lists} \n                selected={this.state.selected}\n                taskContent={this.state.taskContent}\n                handleTaskContent={this.handleTaskContent}\n                onAddTask={this.handleAddTask} />}\n          </div>\n     );\n  }\n}\n \nexport default App;","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\modal.jsx",[],"D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\todoList.jsx",["41"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Component } from 'react';\r\nimport Task from './task';\r\nimport styled from 'styled-components';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst StyledList = styled.div `\r\n    height: auto;\r\n    border: 1px solid #c3cbf7;\r\n    background-color: #f7f8fe;\r\n    border-radius: 6px;\r\n    padding: 8px 8px;\r\n\r\n    .List__header{\r\n       width: 100%;\r\n       \r\n       box-sizing:border-box;\r\n       .List__title{\r\n          \r\n            .List__item-count{\r\n                display:block;\r\n                width: 38px;\r\n                border-radius: 50%;\r\n                text-align: center;\r\n                margin-right: 8px;\r\n            }\r\n            .List__item-text{\r\n                font-family: sans-serif;\r\n                letter-spacing:1px;\r\n                font-weight: bold;\r\n            }\r\n       }\r\n       \r\n    }\r\n    .List__content{\r\n        width: 100%;\r\n        padding: 24px 14px\r\n        \r\n    }\r\n`;\r\n\r\nclass List extends Component {\r\n    \r\n    render() { \r\n        const { list, handleToggelModal, onDelete, handleChooseEdit, isEdit, handleCancelEdit, handleTaskContent,handleEdit } = this.props;\r\n        \r\n        return ( \r\n            <StyledList className=\"col-sm m-2 no-gutter d-flex flex-column align-items-center\">\r\n                <Droppable droppableId={list.id}> \r\n                    {\r\n                        provided =>(\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps} style={{width : '100%', height: 'auto'}}\r\n                            >\r\n                                \r\n                                     <div className=\"List__header d-flex justify-content-between align-items-center\" >\r\n                                     <div className=\"List__title d-flex align-items-center\" >\r\n                                         <div className=\"List__item-count btn btn-success\"><span>{list.tasks.length}</span></div>\r\n                                         <div className=\"List__item-text\">{list.title}</div>\r\n                                     </div>\r\n                                     <div className=\"List__add\">\r\n                                         <button className=\"List__btn btn btn-primary\"  onClick={()=>handleToggelModal(list.id)}><FontAwesomeIcon icon=\"plus\" /> New Task</button>\r\n                                     </div>\r\n                                 </div>\r\n                                  <div className=\"List__content\">\r\n                                     {\r\n                                         list.tasks.map((task, indexTask)=>\r\n                                             <Task\r\n                                                 key ={task.id}\r\n                                                 task = {task}\r\n                                                 onDelete = {onDelete}\r\n                                                 list= {list}\r\n                                                 handleChooseEdit= {handleChooseEdit}\r\n                                                 indexTask= {indexTask}\r\n                                                 handleToggelModal={handleToggelModal}\r\n                                                 isEditing= {task.id === isEdit }\r\n                                                 handleCancelEdit= {handleCancelEdit}\r\n                                                 handleTaskContent={handleTaskContent}\r\n                                                 handleEdit= {handleEdit}\r\n                                             />    \r\n                                             )\r\n                                     }\r\n                                  </div>\r\n                                \r\n                            </div>\r\n                        )\r\n                    }\r\n                </Droppable>\r\n            </StyledList>\r\n         );\r\n    }\r\n}\r\n \r\n\r\n\r\n\r\nexport default List;","D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\font\\index.jsx",[],"D:\\Workspace\\Javascript\\ReactJS\\Demo\\todo-list-app\\src\\component\\task.jsx",["42","43"],"import React, { Component, Fragment } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport styled from 'styled-components';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst TaskList = styled.div`\r\n    font-size: 14px;\r\n    font-family: sans-serif;\r\n    margin-top: 12px;\r\n    padding: 8px 8px;\r\n    border: 1px solid #e5d5d5;\r\n    background-color: #ffff;\r\n    border-radius: 4px;\r\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16);\r\n    \r\n\r\n    @keyframes fadein {\r\n    from {\r\n        opacity:0;\r\n    }\r\n    to {\r\n        opacity:1;\r\n    }\r\n}\r\n    cursor: pointer;\r\n    .list__task-time{\r\n        display: flex;\r\n        align-items: center;\r\n        opacity: .6;\r\n        font-family: 'Ubuntu', sans-serif;\r\n        animation: fadein 2s;\r\n        .list__task-item-icon {\r\n            margin-right: 12px;\r\n        }\r\n    }\r\n    .list__task-content{\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 8px 0;\r\n        transition: all .3s ease; \r\n        animation: fadein 2s;\r\n        .list__task-content-text{\r\n            width: 80%;\r\n            font-weight: bold;\r\n            font-size: 18px;\r\n            word-wrap: break-word;      /* IE 5.5-7 */\r\n            white-space: -moz-pre-wrap; /* Firefox 1.0-2.0 */\r\n            white-space: pre-wrap; \r\n        }\r\n        .list__task-content-options{\r\n            display: flex;\r\n            align-items: center;\r\n            flex : 1;\r\n            justify-content: space-around;\r\n            .options-edit{\r\n                color: #4ab7f7;\r\n                \r\n            }\r\n            .options-delete{\r\n                color: #bdbdc4;\r\n                \r\n                &:hover{\r\n                color: #f13636;\r\n            }\r\n            }\r\n            \r\n        }\r\n    }\r\n    .list__task-edit{\r\n        display: flex;\r\n        flex-grow: 2; \r\n        align-items: center;\r\n        justify-content: space-between;\r\n        animation: fadein 2s;\r\n        .list__task-editor{\r\n            width: 80%;\r\n            z-index: 999;\r\n           .list__task-editing{\r\n               width: 100%;\r\n               padding: 0 8px;\r\n               outline: none;\r\n               border: #4ab7f7 solid 1px;\r\n               border-radius: 2px;\r\n               z-index: 999;\r\n               transition: z-index all .5s; \r\n               &:focus{\r\n                     border: #ee1f1f solid 1px;\r\n           }\r\n           }\r\n          \r\n        }\r\n        .list__task-edit-options{\r\n            display: flex;\r\n            flex: 1;\r\n            align-items: center;\r\n            justify-content: space-around;\r\n            font-size: 14px;\r\n            z-index: 999;\r\n        }\r\n    }\r\n    .list__editing-bgr{\r\n        position: fixed;\r\n        z-index: 1;\r\n        top: 0;\r\n        left: 0;\r\n        background-color: rgba(247, 248, 254, 0.8);\r\n        width: 100vw;\r\n        height: 100vh;\r\n        animation: fadein .3s;\r\n       \r\n    }\r\n\r\n`;\r\n\r\nclass Task extends Component {\r\n    render() { \r\n        const {task, onDelete, list, handleChooseEdit, indexTask, isEditing, handleCancelEdit, handleTaskContent, handleEdit} = this.props;\r\n        \r\n        return ( \r\n            <Draggable\r\n            index= {indexTask}\r\n            draggableId= {task.id}\r\n            isDragDisabled= {isEditing}\r\n        >\r\n            {\r\n                provided => (\r\n                    <TaskList className=\"list__task\"\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                        >\r\n                    {\r\n                        isEditing\r\n                        ? <Fragment>\r\n                             <div className=\"list__task-edit\">\r\n                            <div className=\"list__task-editor\">\r\n                                <input type=\"text\" className=\"list__task-editing\" defaultValue={task.content} onChange={(e)=>handleTaskContent(e)}/>\r\n                            </div>\r\n                             <div className=\"list__task-edit-options\">\r\n                            <div className=\"edit-options-close\">\r\n                                 <FontAwesomeIcon icon=\"check\" className=\"icon text-primary\" onClick={()=>handleEdit(task.id, indexTask, list.id)}/>\r\n                             </div>\r\n                             <div className=\"edit-options-close\" onClick={handleCancelEdit}>\r\n                                 <FontAwesomeIcon icon=\"window-close\" className=\"icon text-danger\"/>\r\n                             </div>\r\n                         </div>\r\n                         <div className=\"list__editing-bgr\" onClick={handleCancelEdit}></div>\r\n                     </div>\r\n                        </Fragment>\r\n                     : <Fragment>\r\n                          <div className=\"list__task-time\">\r\n                       <div className=\"list__task-item-icon\">\r\n                            <FontAwesomeIcon icon=\"calendar-alt\"/>\r\n                       </div>\r\n                        <div className=\"list__task-time-text\">\r\n                            {task.time}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"list__task-content\">\r\n                        <div className=\"list__task-content-text\">\r\n                            {task.content}\r\n                        </div>\r\n                        <div className=\"list__task-content-options\">\r\n                           <div className=\"options-edit\"  onClick= {()=>handleChooseEdit(task.id )}>\r\n                                <FontAwesomeIcon icon=\"edit\" />\r\n                           </div>\r\n                            <div className=\"options-delete\" onClick= {()=>onDelete(task.id, list.id)} >\r\n                                <FontAwesomeIcon icon=\"trash-alt\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                     </Fragment>\r\n                    }\r\n                   \r\n                </TaskList>\r\n                )\r\n            }\r\n        </Draggable>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Task;",["44","45"],{"ruleId":"46","severity":1,"message":"47","line":7,"column":9,"nodeType":"48","messageId":"49","endLine":7,"endColumn":24},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"46","severity":1,"message":"54","line":9,"column":27,"nodeType":"48","messageId":"49","endLine":9,"endColumn":36},{"ruleId":"46","severity":1,"message":"55","line":53,"column":11,"nodeType":"48","messageId":"49","endLine":53,"endColumn":22},{"ruleId":"46","severity":1,"message":"56","line":5,"column":10,"nodeType":"48","messageId":"49","endLine":5,"endColumn":25},{"ruleId":"46","severity":1,"message":"56","line":4,"column":10,"nodeType":"48","messageId":"49","endLine":4,"endColumn":25},{"ruleId":"46","severity":1,"message":"54","line":4,"column":38,"nodeType":"48","messageId":"49","endLine":4,"endColumn":47},{"ruleId":"50","replacedBy":"57"},{"ruleId":"52","replacedBy":"58"},"no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'Droppable' is defined but never used.","'taskContent' is assigned a value but never used.","'DragDropContext' is defined but never used.",["59"],["60"],"no-global-assign","no-unsafe-negation"]